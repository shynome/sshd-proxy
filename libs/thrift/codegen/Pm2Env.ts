/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.8.2
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IPm2EnvArgs {
    pm_cwd?: string;
    pm_out_log_path?: string;
    pm_err_log_path?: string;
    exec_interpreter?: string;
    pm_uptime?: number;
    unstable_restarts?: number;
    restart_time?: number;
    status?: string;
    instances?: number;
    pm_exec_path?: string;
}
export class Pm2Env {
    public pm_cwd?: string;
    public pm_out_log_path?: string;
    public pm_err_log_path?: string;
    public exec_interpreter?: string;
    public pm_uptime?: number;
    public unstable_restarts?: number;
    public restart_time?: number;
    public status?: string;
    public instances?: number;
    public pm_exec_path?: string;
    constructor(args?: IPm2EnvArgs) {
        if (args != null && args.pm_cwd != null) {
            this.pm_cwd = args.pm_cwd;
        }
        if (args != null && args.pm_out_log_path != null) {
            this.pm_out_log_path = args.pm_out_log_path;
        }
        if (args != null && args.pm_err_log_path != null) {
            this.pm_err_log_path = args.pm_err_log_path;
        }
        if (args != null && args.exec_interpreter != null) {
            this.exec_interpreter = args.exec_interpreter;
        }
        if (args != null && args.pm_uptime != null) {
            this.pm_uptime = args.pm_uptime;
        }
        if (args != null && args.unstable_restarts != null) {
            this.unstable_restarts = args.unstable_restarts;
        }
        if (args != null && args.restart_time != null) {
            this.restart_time = args.restart_time;
        }
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        if (args != null && args.instances != null) {
            this.instances = args.instances;
        }
        if (args != null && args.pm_exec_path != null) {
            this.pm_exec_path = args.pm_exec_path;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Pm2Env");
        if (this.pm_cwd != null) {
            output.writeFieldBegin("pm_cwd", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.pm_cwd);
            output.writeFieldEnd();
        }
        if (this.pm_out_log_path != null) {
            output.writeFieldBegin("pm_out_log_path", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.pm_out_log_path);
            output.writeFieldEnd();
        }
        if (this.pm_err_log_path != null) {
            output.writeFieldBegin("pm_err_log_path", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.pm_err_log_path);
            output.writeFieldEnd();
        }
        if (this.exec_interpreter != null) {
            output.writeFieldBegin("exec_interpreter", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.exec_interpreter);
            output.writeFieldEnd();
        }
        if (this.pm_uptime != null) {
            output.writeFieldBegin("pm_uptime", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.pm_uptime);
            output.writeFieldEnd();
        }
        if (this.unstable_restarts != null) {
            output.writeFieldBegin("unstable_restarts", thrift.Thrift.Type.I32, 6);
            output.writeI32(this.unstable_restarts);
            output.writeFieldEnd();
        }
        if (this.restart_time != null) {
            output.writeFieldBegin("restart_time", thrift.Thrift.Type.I32, 7);
            output.writeI32(this.restart_time);
            output.writeFieldEnd();
        }
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.STRING, 8);
            output.writeString(this.status);
            output.writeFieldEnd();
        }
        if (this.instances != null) {
            output.writeFieldBegin("instances", thrift.Thrift.Type.I32, 9);
            output.writeI32(this.instances);
            output.writeFieldEnd();
        }
        if (this.pm_exec_path != null) {
            output.writeFieldBegin("pm_exec_path", thrift.Thrift.Type.STRING, 10);
            output.writeString(this.pm_exec_path);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Pm2Env {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.pm_cwd = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.pm_out_log_path = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.pm_err_log_path = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.exec_interpreter = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.pm_uptime = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: number = input.readI32();
                        _args.unstable_restarts = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: number = input.readI32();
                        _args.restart_time = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.status = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_9: number = input.readI32();
                        _args.instances = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.pm_exec_path = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Pm2Env(_args);
    }
}
