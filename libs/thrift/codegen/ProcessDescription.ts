/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.8.2
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as Monit from "./Monit";
import * as Pm2Env from "./Pm2Env";
export interface IProcessDescriptionArgs {
    name?: string;
    pid?: number;
    pm_id?: number;
    monit?: Monit.Monit;
    pm2_env?: Pm2Env.Pm2Env;
}
export class ProcessDescription {
    public name?: string;
    public pid?: number;
    public pm_id?: number;
    public monit?: Monit.Monit;
    public pm2_env?: Pm2Env.Pm2Env;
    constructor(args?: IProcessDescriptionArgs) {
        if (args != null && args.name != null) {
            this.name = args.name;
        }
        if (args != null && args.pid != null) {
            this.pid = args.pid;
        }
        if (args != null && args.pm_id != null) {
            this.pm_id = args.pm_id;
        }
        if (args != null && args.monit != null) {
            this.monit = args.monit;
        }
        if (args != null && args.pm2_env != null) {
            this.pm2_env = args.pm2_env;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ProcessDescription");
        if (this.name != null) {
            output.writeFieldBegin("name", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.name);
            output.writeFieldEnd();
        }
        if (this.pid != null) {
            output.writeFieldBegin("pid", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.pid);
            output.writeFieldEnd();
        }
        if (this.pm_id != null) {
            output.writeFieldBegin("pm_id", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.pm_id);
            output.writeFieldEnd();
        }
        if (this.monit != null) {
            output.writeFieldBegin("monit", thrift.Thrift.Type.STRUCT, 4);
            this.monit.write(output);
            output.writeFieldEnd();
        }
        if (this.pm2_env != null) {
            output.writeFieldBegin("pm2_env", thrift.Thrift.Type.STRUCT, 5);
            this.pm2_env.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ProcessDescription {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.name = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.pid = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.pm_id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: Monit.Monit = Monit.Monit.read(input);
                        _args.monit = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_5: Pm2Env.Pm2Env = Pm2Env.Pm2Env.read(input);
                        _args.pm2_env = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ProcessDescription(_args);
    }
}
