/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.8.2
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 from "node-int64";
import * as thrift from "thrift";
import * as Command from "./Command";
export interface IProcArgs {
    name?: string;
    vizion?: boolean;
    autorestart?: boolean;
    exec_mode?: string;
    exec_interpreter?: string;
    pm_exec_path?: string;
    pm_cwd?: string;
    instances?: number | Int64;
    node_args?: Array<string>;
    pm_out_log_path?: string;
    pm_err_log_path?: string;
    pm_pid_path?: string;
    status?: string;
    pm_uptime?: string;
    vizion_running?: boolean;
    created_at?: number | Int64;
    pm_id?: number | Int64;
    restart_time?: number | Int64;
    unstable_restarts?: number | Int64;
    started_inside?: boolean;
    command?: Command.Command;
    exit_code?: number | Int64;
}
export class Proc {
    public name?: string;
    public vizion?: boolean;
    public autorestart?: boolean;
    public exec_mode?: string;
    public exec_interpreter?: string;
    public pm_exec_path?: string;
    public pm_cwd?: string;
    public instances?: Int64;
    public node_args?: Array<string>;
    public pm_out_log_path?: string;
    public pm_err_log_path?: string;
    public pm_pid_path?: string;
    public status?: string;
    public pm_uptime?: string;
    public vizion_running?: boolean;
    public created_at?: Int64;
    public pm_id?: Int64;
    public restart_time?: Int64;
    public unstable_restarts?: Int64;
    public started_inside?: boolean;
    public command?: Command.Command;
    public exit_code?: Int64;
    constructor(args?: IProcArgs) {
        if (args != null && args.name != null) {
            this.name = args.name;
        }
        if (args != null && args.vizion != null) {
            this.vizion = args.vizion;
        }
        if (args != null && args.autorestart != null) {
            this.autorestart = args.autorestart;
        }
        if (args != null && args.exec_mode != null) {
            this.exec_mode = args.exec_mode;
        }
        if (args != null && args.exec_interpreter != null) {
            this.exec_interpreter = args.exec_interpreter;
        }
        if (args != null && args.pm_exec_path != null) {
            this.pm_exec_path = args.pm_exec_path;
        }
        if (args != null && args.pm_cwd != null) {
            this.pm_cwd = args.pm_cwd;
        }
        if (args != null && args.instances != null) {
            if (typeof args.instances === "number") {
                this.instances = new Int64(args.instances);
            }
            else {
                this.instances = args.instances;
            }
        }
        if (args != null && args.node_args != null) {
            this.node_args = args.node_args;
        }
        if (args != null && args.pm_out_log_path != null) {
            this.pm_out_log_path = args.pm_out_log_path;
        }
        if (args != null && args.pm_err_log_path != null) {
            this.pm_err_log_path = args.pm_err_log_path;
        }
        if (args != null && args.pm_pid_path != null) {
            this.pm_pid_path = args.pm_pid_path;
        }
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        if (args != null && args.pm_uptime != null) {
            this.pm_uptime = args.pm_uptime;
        }
        if (args != null && args.vizion_running != null) {
            this.vizion_running = args.vizion_running;
        }
        if (args != null && args.created_at != null) {
            if (typeof args.created_at === "number") {
                this.created_at = new Int64(args.created_at);
            }
            else {
                this.created_at = args.created_at;
            }
        }
        if (args != null && args.pm_id != null) {
            if (typeof args.pm_id === "number") {
                this.pm_id = new Int64(args.pm_id);
            }
            else {
                this.pm_id = args.pm_id;
            }
        }
        if (args != null && args.restart_time != null) {
            if (typeof args.restart_time === "number") {
                this.restart_time = new Int64(args.restart_time);
            }
            else {
                this.restart_time = args.restart_time;
            }
        }
        if (args != null && args.unstable_restarts != null) {
            if (typeof args.unstable_restarts === "number") {
                this.unstable_restarts = new Int64(args.unstable_restarts);
            }
            else {
                this.unstable_restarts = args.unstable_restarts;
            }
        }
        if (args != null && args.started_inside != null) {
            this.started_inside = args.started_inside;
        }
        if (args != null && args.command != null) {
            this.command = args.command;
        }
        if (args != null && args.exit_code != null) {
            if (typeof args.exit_code === "number") {
                this.exit_code = new Int64(args.exit_code);
            }
            else {
                this.exit_code = args.exit_code;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Proc");
        if (this.name != null) {
            output.writeFieldBegin("name", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.name);
            output.writeFieldEnd();
        }
        if (this.vizion != null) {
            output.writeFieldBegin("vizion", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.vizion);
            output.writeFieldEnd();
        }
        if (this.autorestart != null) {
            output.writeFieldBegin("autorestart", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.autorestart);
            output.writeFieldEnd();
        }
        if (this.exec_mode != null) {
            output.writeFieldBegin("exec_mode", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.exec_mode);
            output.writeFieldEnd();
        }
        if (this.exec_interpreter != null) {
            output.writeFieldBegin("exec_interpreter", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.exec_interpreter);
            output.writeFieldEnd();
        }
        if (this.pm_exec_path != null) {
            output.writeFieldBegin("pm_exec_path", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.pm_exec_path);
            output.writeFieldEnd();
        }
        if (this.pm_cwd != null) {
            output.writeFieldBegin("pm_cwd", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.pm_cwd);
            output.writeFieldEnd();
        }
        if (this.instances != null) {
            output.writeFieldBegin("instances", thrift.Thrift.Type.I64, 8);
            output.writeI64(this.instances);
            output.writeFieldEnd();
        }
        if (this.node_args != null) {
            output.writeFieldBegin("node_args", thrift.Thrift.Type.LIST, 9);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.node_args.length);
            this.node_args.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.pm_out_log_path != null) {
            output.writeFieldBegin("pm_out_log_path", thrift.Thrift.Type.STRING, 10);
            output.writeString(this.pm_out_log_path);
            output.writeFieldEnd();
        }
        if (this.pm_err_log_path != null) {
            output.writeFieldBegin("pm_err_log_path", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.pm_err_log_path);
            output.writeFieldEnd();
        }
        if (this.pm_pid_path != null) {
            output.writeFieldBegin("pm_pid_path", thrift.Thrift.Type.STRING, 12);
            output.writeString(this.pm_pid_path);
            output.writeFieldEnd();
        }
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.STRING, 13);
            output.writeString(this.status);
            output.writeFieldEnd();
        }
        if (this.pm_uptime != null) {
            output.writeFieldBegin("pm_uptime", thrift.Thrift.Type.STRING, 14);
            output.writeString(this.pm_uptime);
            output.writeFieldEnd();
        }
        if (this.vizion_running != null) {
            output.writeFieldBegin("vizion_running", thrift.Thrift.Type.BOOL, 15);
            output.writeBool(this.vizion_running);
            output.writeFieldEnd();
        }
        if (this.created_at != null) {
            output.writeFieldBegin("created_at", thrift.Thrift.Type.I64, 16);
            output.writeI64(this.created_at);
            output.writeFieldEnd();
        }
        if (this.pm_id != null) {
            output.writeFieldBegin("pm_id", thrift.Thrift.Type.I64, 17);
            output.writeI64(this.pm_id);
            output.writeFieldEnd();
        }
        if (this.restart_time != null) {
            output.writeFieldBegin("restart_time", thrift.Thrift.Type.I64, 18);
            output.writeI64(this.restart_time);
            output.writeFieldEnd();
        }
        if (this.unstable_restarts != null) {
            output.writeFieldBegin("unstable_restarts", thrift.Thrift.Type.I64, 19);
            output.writeI64(this.unstable_restarts);
            output.writeFieldEnd();
        }
        if (this.started_inside != null) {
            output.writeFieldBegin("started_inside", thrift.Thrift.Type.BOOL, 20);
            output.writeBool(this.started_inside);
            output.writeFieldEnd();
        }
        if (this.command != null) {
            output.writeFieldBegin("command", thrift.Thrift.Type.STRUCT, 21);
            this.command.write(output);
            output.writeFieldEnd();
        }
        if (this.exit_code != null) {
            output.writeFieldBegin("exit_code", thrift.Thrift.Type.I64, 22);
            output.writeI64(this.exit_code);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Proc {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.name = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.vizion = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.autorestart = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.exec_mode = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.exec_interpreter = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.pm_exec_path = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.pm_cwd = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_9: Int64 = input.readI64();
                        _args.instances = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_10: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_11: string = input.readString();
                            value_10.push(value_11);
                        }
                        input.readListEnd();
                        _args.node_args = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_12: string = input.readString();
                        _args.pm_out_log_path = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.pm_err_log_path = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_14: string = input.readString();
                        _args.pm_pid_path = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_15: string = input.readString();
                        _args.status = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_16: string = input.readString();
                        _args.pm_uptime = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_17: boolean = input.readBool();
                        _args.vizion_running = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_18: Int64 = input.readI64();
                        _args.created_at = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_19: Int64 = input.readI64();
                        _args.pm_id = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_20: Int64 = input.readI64();
                        _args.restart_time = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_21: Int64 = input.readI64();
                        _args.unstable_restarts = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_22: boolean = input.readBool();
                        _args.started_inside = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_23: Command.Command = Command.Command.read(input);
                        _args.command = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_24: Int64 = input.readI64();
                        _args.exit_code = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Proc(_args);
    }
}
