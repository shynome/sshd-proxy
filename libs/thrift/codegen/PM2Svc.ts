/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.8.2
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as Proc from "./Proc";
export interface IAddProxyArgsArgs {
    rule: string;
}
export class AddProxyArgs {
    public rule: string;
    constructor(args: IAddProxyArgsArgs) {
        if (args != null && args.rule != null) {
            this.rule = args.rule;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[rule] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddProxyArgs");
        if (this.rule != null) {
            output.writeFieldBegin("rule", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.rule);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddProxyArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.rule = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.rule !== undefined) {
            return new AddProxyArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read AddProxyArgs from input");
        }
    }
}
export interface IDelProxyArgsArgs {
    rule: string;
}
export class DelProxyArgs {
    public rule: string;
    constructor(args: IDelProxyArgsArgs) {
        if (args != null && args.rule != null) {
            this.rule = args.rule;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[rule] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DelProxyArgs");
        if (this.rule != null) {
            output.writeFieldBegin("rule", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.rule);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DelProxyArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.rule = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.rule !== undefined) {
            return new DelProxyArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read DelProxyArgs from input");
        }
    }
}
export interface IAddProxyResultArgs {
    success?: Proc.Proc;
}
export class AddProxyResult {
    public success?: Proc.Proc;
    constructor(args?: IAddProxyResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AddProxyResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AddProxyResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: Proc.Proc = Proc.Proc.read(input);
                        _args.success = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AddProxyResult(_args);
    }
}
export interface IDelProxyResultArgs {
    success?: Proc.Proc;
}
export class DelProxyResult {
    public success?: Proc.Proc;
    constructor(args?: IDelProxyResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DelProxyResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DelProxyResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: Proc.Proc = Proc.Proc.read(input);
                        _args.success = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DelProxyResult(_args);
    }
}
export class Client {
    public _seqid: number;
    public _reqs: {
        [name: number]: (err: Error | object | undefined, val?: any) => void;
    };
    public output: thrift.TTransport;
    public protocol: new (trans: thrift.TTransport) => thrift.TProtocol;
    constructor(output: thrift.TTransport, protocol: new (trans: thrift.TTransport) => thrift.TProtocol) {
        this._seqid = 0;
        this._reqs = {};
        this.output = output;
        this.protocol = protocol;
    }
    public incrementSeqId(): number {
        return this._seqid += 1;
    }
    public AddProxy(rule: string): Promise<Proc.Proc> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Proc.Proc>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_AddProxy(rule, requestId);
        });
    }
    public DelProxy(rule: string): Promise<Proc.Proc> {
        const requestId: number = this.incrementSeqId();
        return new Promise<Proc.Proc>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_DelProxy(rule, requestId);
        });
    }
    public send_AddProxy(rule: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("AddProxy", thrift.Thrift.MessageType.CALL, requestId);
        const args: AddProxyArgs = new AddProxyArgs({ rule });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_DelProxy(rule: string, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("DelProxy", thrift.Thrift.MessageType.CALL, requestId);
        const args: DelProxyArgs = new DelProxyArgs({ rule });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public recv_AddProxy(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: AddProxyResult = AddProxyResult.read(input);
            input.readMessageEnd();
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "AddProxy failed: unknown result"));
            }
        }
    }
    public recv_DelProxy(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: DelProxyResult = DelProxyResult.read(input);
            input.readMessageEnd();
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "DelProxy failed: unknown result"));
            }
        }
    }
}
export interface IHandler<Context = any> {
    AddProxy(context: Context, rule: string): Proc.Proc | Promise<Proc.Proc>;
    DelProxy(context: Context, rule: string): Proc.Proc | Promise<Proc.Proc>;
}
export class Processor<Context = any> {
    public _handler: IHandler<Context>;
    constructor(handler: IHandler<Context>) {
        this._handler = handler;
    }
    public process(input: thrift.TProtocol, output: thrift.TProtocol, context: Context): void {
        const metadata: thrift.TMessage = input.readMessageBegin();
        const fname: string = metadata.fname;
        const requestId: number = metadata.rseqid;
        const methodName: string = "process_" + fname;
        switch (methodName) {
            case "process_AddProxy": {
                this.process_AddProxy(requestId, input, output, context);
                return;
            }
            case "process_DelProxy": {
                this.process_DelProxy(requestId, input, output, context);
                return;
            }
            default: {
                input.skip(thrift.Thrift.Type.STRUCT);
                input.readMessageEnd();
                const errMessage = "Unknown function " + fname;
                const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, requestId);
                err.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        }
    }
    public process_AddProxy(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): void {
        new Promise<Proc.Proc>((resolve, reject): void => {
            try {
                const args: AddProxyArgs = AddProxyArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.AddProxy(context, args.rule));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Proc.Proc): void => {
            const result: AddProxyResult = new AddProxyResult({ success: data });
            output.writeMessageBegin("AddProxy", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("AddProxy", thrift.Thrift.MessageType.EXCEPTION, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        });
    }
    public process_DelProxy(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol, context: Context): void {
        new Promise<Proc.Proc>((resolve, reject): void => {
            try {
                const args: DelProxyArgs = DelProxyArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.DelProxy(context, args.rule));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: Proc.Proc): void => {
            const result: DelProxyResult = new DelProxyResult({ success: data });
            output.writeMessageBegin("DelProxy", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("DelProxy", thrift.Thrift.MessageType.EXCEPTION, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        });
    }
}
