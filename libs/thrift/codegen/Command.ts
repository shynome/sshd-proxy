/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.8.2
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface ICommandArgs {
    locked?: boolean;
    metadata?: string;
    started_at?: string;
    finished_at?: string;
    error?: string;
}
export class Command {
    public locked?: boolean;
    public metadata?: string;
    public started_at?: string;
    public finished_at?: string;
    public error?: string;
    constructor(args?: ICommandArgs) {
        if (args != null && args.locked != null) {
            this.locked = args.locked;
        }
        if (args != null && args.metadata != null) {
            this.metadata = args.metadata;
        }
        if (args != null && args.started_at != null) {
            this.started_at = args.started_at;
        }
        if (args != null && args.finished_at != null) {
            this.finished_at = args.finished_at;
        }
        if (args != null && args.error != null) {
            this.error = args.error;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Command");
        if (this.locked != null) {
            output.writeFieldBegin("locked", thrift.Thrift.Type.BOOL, 1);
            output.writeBool(this.locked);
            output.writeFieldEnd();
        }
        if (this.metadata != null) {
            output.writeFieldBegin("metadata", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.metadata);
            output.writeFieldEnd();
        }
        if (this.started_at != null) {
            output.writeFieldBegin("started_at", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.started_at);
            output.writeFieldEnd();
        }
        if (this.finished_at != null) {
            output.writeFieldBegin("finished_at", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.finished_at);
            output.writeFieldEnd();
        }
        if (this.error != null) {
            output.writeFieldBegin("error", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.error);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Command {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_1: boolean = input.readBool();
                        _args.locked = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.metadata = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.started_at = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.finished_at = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.error = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Command(_args);
    }
}
